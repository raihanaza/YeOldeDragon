matter Coffee {
    init(roast: int) {
        ye.roast = "";
    }

    don brew() -> void {
        proclaim("This coffee is called ${ye.name} and it is a ${ye.roast}.");
    }

    don isSeasonal() -> string {
       ~ need to implement null coalescing operator
       ~ return this.seasonal?.asString() ?? “Not specified”;
    }

}
~~
matter Coffee {
    init(roast: int, name: string, seasonal: boolean?) {
        ye.roast = roast + 2;
        ye.name = name;
        ye.seasonal = seasonal;
    }

    don brew() -> void {
        proclaim("This coffee is called ${ye.name} and it is a ${ye.roast}.");
    }

    don isSeasonal() -> string {
       ~ need to implement null coalescing operator
       ~ return this.seasonal?.asString() ?? “Not specified”;
    }

}
~~

~thine pike: Coffee = Coffee(name: “Pike Place”, roast: “medium-roast”);
~proclaim(pike.brew());
~ Expected output: This coffee is called Pike Place and it is a medium-roast.

~ proclaim(pike.isSeasonal());
~ Expected output: Not specified

~ thine holidayBlend: Coffee = Coffee(name: “Holiday Blend”, roast: “light-roast”, seasonal: true);
~console.log(holidayBlend.isSeasonal());
~ Expected output: true
