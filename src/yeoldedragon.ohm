YeOldeDragon {
     Program = Statement+
     Statement = VarDecl
              | PrintStmt
              | FuncDecl
              | ClassDecl
              // | Exp7_member ";"                                                   --member
              | Exp7_call ";"                                                        --call
              | Exp7 ("++"|"--") ";"										--incdec
              | Exp7 "=" Exp0 ";"											--assign
              | breaketh ";"                                                         --break
              | return Exp0 ";" 											--return
              | return ";"											     --returnvoid
              | IfStmt
              | LoopStmt
              | TypeDecl

    Block = "{" Statement* "}"
    BreakStmt = breaketh ";"
    Params      = "(" ListOf<Param, ","> ")"
    Param       = id ":" Type
    FuncDecl    = don id Params "->" Type Block
    Arg         = id ":" Exp0

    TypeDecl = matter id "{" Field* "}"
    // how to do default parameters? how to require users to initialize parameters in Block?
    ClassDecl = matter id "{" ClassInit Methods "}"
    ClassInit = init Fields FieldInitBlock
    Field = id ":" Type
    Fields = "(" ListOf<Field, ","> ")"
    FieldInitBlock = "{" FieldInit* "}"
    FieldInit = ye "." id "=" Exp0 ";"
    ClassMemberExpression = ye "." id
    Methods = FuncDecl*

    Type = Type "?" 												    	--optional
         | "[" Type "]" 													--list
         | "(" ListOf<Type, ",">")" "->" Type 								--function
         | id 															--id

    PrintStmt = proclaim Exp0 ";"
    VarDecl = (thine | fact) id ":" Type "=" Exp0 ";"

    IfStmt = perchance Exp0 Block else Block 					               --long
    	      | perchance Exp0 Block else IfStmt 						          --elseif
           | perchance Exp0 Block									          --short

    LoopStmt = whilst Exp0 Block											--while
             | fortill Exp0 Block											--for
             | fortill id in Exp0 ("..." | "..<") Exp0 Block                         --range
             | fortill id in Exp0 Block 									--forEach

    Exp0 = Exp1 "?" Exp1 ":" Exp0 										    --ternary
             | Exp1
    Exp1 = Exp1 "??" Exp2 												    --nilcoalescing
         | Exp2
    Exp2 = Exp3 ("||" Exp3)+										     	--or
         | Exp3 ("&&" Exp3)+										     	--and
         | Exp3
    Exp3 = Exp4 relop Exp4 												    --compare
         | Exp4
    Exp4 = Exp4 ("+" | "-") Exp5										    --addsub
         | Exp5
    Exp5 = Exp5 ("*"|"/"|"%") Exp6 										    --multiply
         | Exp6
    Exp6 = Exp7 "^" Exp6												    --power
         | Exp7
         | (ne | "-") Exp7                                                  --unary
    Exp7 = shall ~mut
         | shant ~mut
         | floatLiteral ~mut
         | intLiteral ~mut
         | zilch ~mut
         | Exp7 "(" ListOf<Arg, ","> ")" ~mut                               --call
         | Exp7 "[" Exp0 "]"                                                --subscript
         | (ye | Exp7) ("." | "?.") id                                      --member
         | String ~mut
         | id                                                               --id
         | "[" "]" ~mut 										      --emptylist
         | "[" NonemptyListOf<Exp0, ","> "]" ~mut 					 --listExp
         | "(" Exp0 ")" ~mut 									      --parens

    intLiteral = digit+
    floatLiteral = digit+ "." digit+ (("E"|"e") ("+"|"-")? digit+)?
    mut = ~"==" "=" | "++" | "--"

    proclaim = "proclaim" ~idchar
    thine = "thine" ~idchar
    fact = "fact" ~idchar
    fortill = "fortill" ~idchar
    whilst = "whilst" ~idchar
    perchance = "perchance" ~idchar
    else = "else" ~idchar
    in = "in" ~idchar
    don = "don" ~idchar
    matter = "matter" ~idchar
    init = "init" ~idchar
    changeth = "changeth" ~idchar
    breaketh = "breaketh" ~idchar
    spell = "spell" ~idchar
    defaulte = "defaulte" ~idchar
    return = "return" ~idchar
    shall = "shall" ~idchar
    shant = "shant" ~idchar
    ne = "ne" ~idchar
    ye = "ye" ~idchar
    zilch = "zilch" ~idchar

    id = ~keyword letter idchar*
    keyword = proclaim | thine | fact | fortill | whilst | perchance | else | don
            | matter | init | changeth | spell | defaulte | shall | shant | in | return
            | breaketh | ne | ye | zilch
    idchar = letter | digit | "_"
    numeral = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?

    String    = "\"" lit (Interp lit)* "\""
    lit       = char*
    char      = ~control ~"\\" ~"\"" ~"$" any   			                    --char
              | "\\" escape                					               --esc
              | "\\u{" hex hex? hex? hex? hex? hex? "}"                         --codepoint

    escape    = "n" | "t" | "\"" | "\\" | "$" | "(" | ")" | "\""
    Interp    = "${" Exp0 "}"
    hex       = hexDigit
    control   = "\x00".."\x1f" | "\x80".."\x9f"
    relop = "<=" | "<" | "==" | "!=" | ">=" | ">"
    comment = "~~" (~"~~" any)* "~~"                                            --multiline
            | "~" (~"\n" any)*                                                  --line

    space += comment
}